# events { }

# http {

#   map $http_upgrade $connection_upgrade {
#       default upgrade;
#       ''      close;
#     }

#   server {
#     server_name www.build.joemelias.com;
#     return 301 $scheme://build.joemelias.com$request_uri;
#   }

#   server {
#     listen 80;
#     server_name build.joemelias.com;
#     return 301 https://build.joemelias.com$request_uri;
#          }

#    server {
#     listen 443 ssl;
#     server_name build.joemelias.com;
    
#     ssl_certificate /etc/nginx/certs/fullchain.pem;
#     ssl_certificate_key /etc/nginx/certs/privkey.pem;
    
#     access_log /var/log/nginx/data-access.log combined;

#     location / {
#       root /usr/share/nginx/html;
#       }

#     location /api {
#        proxy_pass http://backend:5000/api;
#        proxy_set_header X-Real-IP  $remote_addr;
#        proxy_set_header X-Forwarded-For $remote_addr;
#        proxy_set_header Host $host;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        proxy_redirect http://backend:5000/api $scheme://$http_host/;
#        proxy_http_version 1.1;
#        proxy_set_header Upgrade $http_upgrade;
#        proxy_set_header Connection $connection_upgrade;
#        proxy_read_timeout 20d;
#        proxy_buffering off;
#        }

#    }
# }


events { }

http {

  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

  # redirect www => non-www

  server {
    server_name www.build.joemelias.com;
    return 301 $scheme://build.joemelias.com$request_uri;
  }

  # redirect http => https

  server {
    listen 80;
    server_name build.joemelias.com;
    return 301 https://build.joemelias.com$request_uri;
         }

    # read the ssl certificate and key when listening on https

   server {
    listen 443 ssl;
    server_name build.joemelias.com;
    
    ssl_certificate /etc/letsencrypt/live/build.joemelias.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/build.joemelias.com/privkey.pem;
    
    access_log /usr/local/var/log/nginx/access.log combined;

    # serve the static files: nginx fetches data from its static folder, just like any static webserver

    location / {
      root /usr/local/var/www;
      }

    # fetch data from proxied server when /api is called: nginx will request a proxied server, fetch the response, and send it back to the client.
    # the proxied served corresponds to the container name of the backend service managed by docker-compose

    location /api {
       proxy_pass http://backend:5000/api;
       proxy_set_header X-Real-IP  $remote_addr;
       proxy_set_header X-Forwarded-For $remote_addr;
       proxy_set_header Host $host;
       proxy_set_header X-Forwarded-Proto $scheme;
       proxy_redirect http://backend:5000/api $scheme://$http_host/;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
       proxy_read_timeout 20d;
       proxy_buffering off;
       }

   }
}
